-- X√≥a database c≈© n·∫øu t·ªìn t·∫°i
IF EXISTS (SELECT name FROM sys.databases WHERE name = 'MONSTER_PK')
BEGIN
    ALTER DATABASE MONSTER_PK SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE MONSTER_PK;
END
GO

CREATE DATABASE MONSTER_PK;
GO
USE MONSTER_PK;
GO

-- ==========================================
-- B·∫¢NG H·ªÜ TH·ªêNG CORE
-- ==========================================

-- B·∫¢NG NG∆Ø·ªúI CH∆†I - L∆∞u th√¥ng tin t√†i kho·∫£n user
CREATE TABLE [User] (
    user_id NVARCHAR(20) PRIMARY KEY,             -- ID ng∆∞·ªùi ch∆°i (PK) - VD: "user_001"
    username NVARCHAR(50) UNIQUE NOT NULL,        -- T√™n ƒëƒÉng nh·∫≠p - PH·∫¢I DUY NH·∫§T
    email NVARCHAR(100) UNIQUE,                   -- Email - PH·∫¢I DUY NH·∫§T  
    password_hash NVARCHAR(255) NOT NULL,         -- M·∫≠t kh·∫©u ƒë√£ bƒÉm (d√πng bcrypt)
    salt NVARCHAR(100) NOT NULL,                  -- Mu·ªëi ƒë·ªÉ b·∫£o m·∫≠t password
    display_name NVARCHAR(100),                   -- T√™n hi·ªÉn th·ªã trong game
    current_location NVARCHAR(20) DEFAULT 'town_01', -- V·ªã tr√≠ hi·ªán t·∫°i c·ªßa user
    play_time INT DEFAULT 0,                      -- T·ªïng th·ªùi gian ch∆°i (ph√∫t)
    last_ip_address NVARCHAR(45),                 -- IP cu·ªëi c√πng ƒëƒÉng nh·∫≠p
    failed_login_attempts INT DEFAULT 0,          -- S·ªë l·∫ßn ƒëƒÉng nh·∫≠p sai
    account_locked_until DATETIME2,               -- Th·ªùi gian kh√≥a t√†i kho·∫£n ƒë·∫øn
    email_verified BIT DEFAULT 0,                 -- Email ƒë√£ x√°c th·ª±c ch∆∞a (0=ch∆∞a, 1=r·ªìi)
    two_factor_enabled BIT DEFAULT 0,             -- C√≥ b·∫≠t 2FA kh√¥ng
    created_at DATETIME2 DEFAULT GETDATE(),       -- Ng√†y t·∫°o t√†i kho·∫£n
    last_login DATETIME2,                         -- L·∫ßn cu·ªëi ƒëƒÉng nh·∫≠p
    last_save DATETIME2,                          -- L·∫ßn cu·ªëi l∆∞u game
    is_active BIT DEFAULT 1,                      -- T√†i kho·∫£n c√≥ ho·∫°t ƒë·ªông kh√¥ng
    is_banned BIT DEFAULT 0,                      -- C√≥ b·ªã ban kh√¥ng
    ban_reason NVARCHAR(MAX),                     -- L√Ω do b·ªã ban
    ban_until DATETIME2,                          -- Ban ƒë·∫øn khi n√†o
    game_version NVARCHAR(10) DEFAULT '1.0.0'     -- Phi√™n b·∫£n game user ƒëang ch∆°i
);

-- B·∫¢NG M·∫™U QU√ÅI V·∫¨T - ƒê·ªãnh nghƒ©a c√°c lo√†i qu√°i (nh∆∞ Pokedex)
CREATE TABLE [Monster] (
    mon_id NVARCHAR(20) PRIMARY KEY,              -- ID qu√°i v·∫≠t (PK) - VD: "pika_001"
    mon_name NVARCHAR(50) NOT NULL,               -- T√™n qu√°i v·∫≠t - VD: "Pikachu"
    species NVARCHAR(50) NOT NULL,                -- Lo√†i - VD: "Mouse Pokemon" 
    type1 NVARCHAR(20) NOT NULL,                  -- H·ªá ch√≠nh - VD: "Electric"
    type2 NVARCHAR(20),                           -- H·ªá ph·ª• - VD: "Flying" (c√≥ th·ªÉ NULL)
    base_hp INT NOT NULL CHECK (base_hp BETWEEN 1 AND 255),      -- HP c∆° s·ªü
    base_atk INT NOT NULL CHECK (base_atk BETWEEN 1 AND 255),    -- T·∫•n c√¥ng c∆° s·ªü
    base_def INT NOT NULL CHECK (base_def BETWEEN 1 AND 255),    -- Ph√≤ng th·ªß c∆° s·ªü
    base_spa INT NOT NULL CHECK (base_spa BETWEEN 1 AND 255),    -- T·∫•n c√¥ng ƒë·∫∑c bi·ªát c∆° s·ªü
    base_spd INT NOT NULL CHECK (base_spd BETWEEN 1 AND 255),    -- Ph√≤ng th·ªß ƒë·∫∑c bi·ªát c∆° s·ªü
    base_spe INT NOT NULL CHECK (base_spe BETWEEN 1 AND 255),    -- T·ªëc ƒë·ªô c∆° s·ªü
    catch_rate DECIMAL(4,3) DEFAULT 0.500 CHECK (catch_rate BETWEEN 0.001 AND 1.000), -- T·ª∑ l·ªá b·∫Øt ƒë∆∞·ª£c (0.001-1.000)
    base_exp INT DEFAULT 50 CHECK (base_exp BETWEEN 1 AND 1000), -- EXP cho khi ƒë√°nh b·∫°i qu√°i n√†y
    growth_rate NVARCHAR(20) DEFAULT 'medium' CHECK (growth_rate IN ('slow', 'medium', 'fast')), -- T·ªëc ƒë·ªô l√™n c·∫•p
    sprite_path NVARCHAR(255),                    -- ƒê∆∞·ªùng d·∫´n file h√¨nh ·∫£nh
    cry_sound NVARCHAR(255),                      -- ƒê∆∞·ªùng d·∫´n file ti·∫øng k√™u
    description NVARCHAR(MAX),                    -- M√¥ t·∫£ qu√°i v·∫≠t
    habitat NVARCHAR(50),                         -- M√¥i tr∆∞·ªùng s·ªëng
    height_cm INT CHECK (height_cm > 0),          -- Chi·ªÅu cao (cm)
    weight_kg DECIMAL(5,2) CHECK (weight_kg > 0), -- C√¢n n·∫∑ng (kg)
    is_legendary BIT DEFAULT 0,                   -- C√≥ ph·∫£i qu√°i huy·ªÅn tho·∫°i kh√¥ng
    is_starter BIT DEFAULT 0,                     -- C√≥ ph·∫£i qu√°i kh·ªüi ƒë·∫ßu kh√¥ng
    rarity INT DEFAULT 1 CHECK (rarity BETWEEN 1 AND 5), -- ƒê·ªô hi·∫øm (1=th∆∞·ªùng, 5=c·ª±c hi·∫øm)
    created_at DATETIME2 DEFAULT GETDATE(),       -- Ng√†y th√™m v√†o database
    updated_at DATETIME2 DEFAULT GETDATE()        -- Ng√†y c·∫≠p nh·∫≠t cu·ªëi
);

-- B·∫¢NG M·∫™U CHI√äU TH·ª®C - ƒê·ªãnh nghƒ©a t·∫•t c·∫£ c√°c chi√™u th·ª©c
CREATE TABLE [Move] (
    move_id NVARCHAR(20) PRIMARY KEY,             -- ID chi√™u th·ª©c (PK) - VD: "thunderbolt"
    move_name NVARCHAR(50) NOT NULL,              -- T√™n chi√™u - VD: "Thunderbolt"
    move_type NVARCHAR(20) NOT NULL,              -- H·ªá c·ªßa chi√™u - VD: "Electric"
    category NVARCHAR(20) NOT NULL CHECK (category IN ('Physical', 'Special', 'Status')), -- Lo·∫°i chi√™u
    power INT DEFAULT 0 CHECK (power BETWEEN 0 AND 250), -- S·ª©c m·∫°nh (0 = chi√™u kh√¥ng t·∫•n c√¥ng)
    accuracy INT DEFAULT 100 CHECK (accuracy BETWEEN 0 AND 100), -- ƒê·ªô ch√≠nh x√°c (%)
    max_pp INT NOT NULL CHECK (max_pp BETWEEN 1 AND 40), -- PP t·ªëi ƒëa
    priority INT DEFAULT 0 CHECK (priority BETWEEN -8 AND 8), -- ƒê·ªô ∆∞u ti√™n (-8 ƒë·∫øn +8)
    effect_type NVARCHAR(50),                     -- Lo·∫°i hi·ªáu ·ª©ng - VD: "paralyze", "burn"
    effect_value INT,                             -- Gi√° tr·ªã hi·ªáu ·ª©ng
    effect_chance DECIMAL(4,3) DEFAULT 0.000 CHECK (effect_chance BETWEEN 0 AND 1), -- T·ª∑ l·ªá hi·ªáu ·ª©ng
    target_type NVARCHAR(20) DEFAULT 'enemy' CHECK (target_type IN ('enemy', 'all_enemy', 'self', 'ally', 'all_ally', 'field')), -- M·ª•c ti√™u
    description NVARCHAR(MAX),                    -- M√¥ t·∫£ chi√™u th·ª©c
    animation_id NVARCHAR(20),                    -- ID animation khi d√πng chi√™u
    sound_path NVARCHAR(255),                     -- ƒê∆∞·ªùng d·∫´n √¢m thanh
    is_tm BIT DEFAULT 0,                          -- C√≥ ph·∫£i TM (Technical Machine) kh√¥ng
    tm_number INT CHECK (tm_number BETWEEN 1 AND 100), -- S·ªë TM (n·∫øu l√† TM)
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE()
);

-- B·∫¢NG HI·ªÜU QU·∫¢ H·ªÜ - Ma tr·∫≠n t∆∞∆°ng kh·∫Øc gi·ªØa c√°c h·ªá
CREATE TABLE [TypeChart] (
    chart_id INT IDENTITY(1,1) PRIMARY KEY,       -- ID t·ª± tƒÉng
    atk_type NVARCHAR(20) NOT NULL,               -- H·ªá t·∫•n c√¥ng
    def_type NVARCHAR(20) NOT NULL,               -- H·ªá ph√≤ng th·ªß  
    effectiveness DECIMAL(3,2) NOT NULL DEFAULT 1.0 CHECK (effectiveness BETWEEN 0 AND 4.0), -- Hi·ªáu qu·∫£
    -- VD: Fire vs Grass = 2.0 (si√™u hi·ªáu qu·∫£), Fire vs Water = 0.5 (kh√¥ng hi·ªáu qu·∫£)
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT UQ_type_pair UNIQUE (atk_type, def_type) -- M·ªói c·∫∑p h·ªá ch·ªâ c√≥ 1 record
);

-- B·∫¢NG V·∫¨T PH·∫®M - ƒê·ªãnh nghƒ©a t·∫•t c·∫£ items trong game
CREATE TABLE [Item] (
    item_id NVARCHAR(20) PRIMARY KEY,             -- ID v·∫≠t ph·∫©m (PK) - VD: "potion_001"
    item_name NVARCHAR(50) NOT NULL,              -- T√™n v·∫≠t ph·∫©m - VD: "Potion"
    category NVARCHAR(20) NOT NULL CHECK (category IN ('heal', 'ball', 'buff', 'key', 'tm', 'berry', 'misc')), -- Danh m·ª•c
    item_type NVARCHAR(20) NOT NULL CHECK (item_type IN ('consumable', 'key_item', 'tm_hm', 'berry', 'hold_item')), -- Lo·∫°i
    effect_type NVARCHAR(50),                     -- Lo·∫°i hi·ªáu ·ª©ng - VD: "heal_hp", "increase_catch_rate"
    effect_value INT,                             -- Gi√° tr·ªã hi·ªáu ·ª©ng - VD: 20 (h·ªìi 20 HP)
    effect_data NVARCHAR(MAX),                    -- D·ªØ li·ªáu hi·ªáu ·ª©ng chi ti·∫øt (JSON format)
    buy_price INT DEFAULT 0 CHECK (buy_price >= 0), -- Gi√° mua (0 = kh√¥ng th·ªÉ mua)
    sell_price INT DEFAULT 0 CHECK (sell_price >= 0), -- Gi√° b√°n (0 = kh√¥ng th·ªÉ b√°n)
    description NVARCHAR(MAX),                    -- M√¥ t·∫£ v·∫≠t ph·∫©m
    icon_path NVARCHAR(255),                      -- ƒê∆∞·ªùng d·∫´n icon
    usable_battle BIT DEFAULT 0,                  -- C√≥ th·ªÉ d√πng trong battle kh√¥ng
    usable_field BIT DEFAULT 0,                   -- C√≥ th·ªÉ d√πng ngo√†i battle kh√¥ng
    stackable BIT DEFAULT 1,                      -- C√≥ th·ªÉ x·∫øp ch·ªìng kh√¥ng
    max_stack INT DEFAULT 99 CHECK (max_stack BETWEEN 1 AND 999), -- S·ªë l∆∞·ª£ng t·ªëi ƒëa m·ªói stack
    rarity NVARCHAR(20) DEFAULT 'common' CHECK (rarity IN ('common', 'uncommon', 'rare', 'epic', 'legendary')), -- ƒê·ªô hi·∫øm
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE()
);

-- ==========================================
-- B·∫¢NG TI·ªÄN T·ªÜ - H·ªÜ TH·ªêNG ƒêA TI·ªÄN T·ªÜ
-- ==========================================

-- B·∫¢NG LO·∫†I TI·ªÄN T·ªÜ - ƒê·ªãnh nghƒ©a c√°c lo·∫°i ti·ªÅn trong game
CREATE TABLE [Currency] (
    currency_id NVARCHAR(20) PRIMARY KEY,         -- ID ti·ªÅn t·ªá (PK) - VD: "gold", "diamond"
    currency_name NVARCHAR(50) NOT NULL,          -- T√™n ti·ªÅn t·ªá
    display_name NVARCHAR(50) NOT NULL,           -- T√™n hi·ªÉn th·ªã - VD: "V√†ng", "Kim C∆∞∆°ng"
    symbol NVARCHAR(10) NOT NULL,                 -- K√Ω hi·ªáu - VD: "ü™ô", "üíé"
    description NVARCHAR(MAX),                    -- M√¥ t·∫£ ti·ªÅn t·ªá
    icon_path NVARCHAR(255),                      -- ƒê∆∞·ªùng d·∫´n icon
    max_amount BIGINT DEFAULT 999999999 CHECK (max_amount > 0), -- S·ªë l∆∞·ª£ng t·ªëi ƒëa user c√≥ th·ªÉ c√≥
    is_premium BIT DEFAULT 0,                     -- C√≥ ph·∫£i ti·ªÅn premium kh√¥ng (mua b·∫±ng ti·ªÅn th·∫≠t)
    exchange_rate DECIMAL(10,4) DEFAULT 1.0000 CHECK (exchange_rate > 0), -- T·ª∑ gi√° so v·ªõi v√†ng
    can_trade BIT DEFAULT 1,                      -- C√≥ th·ªÉ giao d·ªãch gi·ªØa users kh√¥ng
    can_earn BIT DEFAULT 1,                       -- C√≥ th·ªÉ ki·∫øm trong game kh√¥ng
    created_at DATETIME2 DEFAULT GETDATE()
);

-- B·∫¢NG TI·ªÄN T·ªÜ C·ª¶A USER - L∆∞u s·ªë ti·ªÅn m·ªói user c√≥
CREATE TABLE [UserCurrency] (
    ucurrency_id INT IDENTITY(1,1) PRIMARY KEY,   -- ID t·ª± tƒÉng
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    currency_id NVARCHAR(20) NOT NULL,            -- ID lo·∫°i ti·ªÅn t·ªá (FK)
    amount BIGINT DEFAULT 0 CHECK (amount >= 0),  -- S·ªë l∆∞·ª£ng hi·ªán t·∫°i
    lifetime_earned BIGINT DEFAULT 0 CHECK (lifetime_earned >= 0), -- T·ªïng s·ªë ƒë√£ ki·∫øm ƒë∆∞·ª£c
    lifetime_spent BIGINT DEFAULT 0 CHECK (lifetime_spent >= 0),   -- T·ªïng s·ªë ƒë√£ ti√™u
    last_transaction DATETIME2,                   -- Th·ªùi gian giao d·ªãch cu·ªëi
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_UserCurrency_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_UserCurrency_Currency FOREIGN KEY (currency_id) REFERENCES [Currency](currency_id),
    CONSTRAINT UQ_user_currency UNIQUE (user_id, currency_id) -- M·ªói user ch·ªâ c√≥ 1 record cho m·ªói lo·∫°i ti·ªÅn
);

-- B·∫¢NG L·ªäCH S·ª¨ GIAO D·ªäCH TI·ªÄN T·ªÜ - Tracking m·ªçi thay ƒë·ªïi v·ªÅ ti·ªÅn
CREATE TABLE [CurrencyTransaction] (
    trans_id NVARCHAR(20) PRIMARY KEY,            -- ID giao d·ªãch (PK)
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    currency_id NVARCHAR(20) NOT NULL,            -- ID lo·∫°i ti·ªÅn t·ªá (FK)
    trans_type NVARCHAR(20) NOT NULL CHECK (trans_type IN ('earn', 'spend', 'transfer', 'exchange', 'admin_add', 'admin_remove')), -- Lo·∫°i giao d·ªãch
    amount BIGINT NOT NULL CHECK (amount > 0),    -- S·ªë ti·ªÅn giao d·ªãch
    balance_before BIGINT NOT NULL CHECK (balance_before >= 0), -- S·ªë d∆∞ tr∆∞·ªõc giao d·ªãch
    balance_after BIGINT NOT NULL CHECK (balance_after >= 0),   -- S·ªë d∆∞ sau giao d·ªãch
    source_type NVARCHAR(20) NOT NULL CHECK (source_type IN ('battle', 'quest', 'shop', 'trade', 'achievement', 'daily', 'admin', 'exchange', 'gift')), -- Ngu·ªìn giao d·ªãch
    source_id NVARCHAR(20),                       -- ID ngu·ªìn - VD: battle_id, quest_id
    description NVARCHAR(MAX),                    -- M√¥ t·∫£ giao d·ªãch
    metadata NVARCHAR(MAX),                       -- D·ªØ li·ªáu b·ªï sung (JSON format)
    is_verified BIT DEFAULT 1,                    -- Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c ch∆∞a (anti-cheat)
    admin_user_id NVARCHAR(20),                   -- Admin th·ª±c hi·ªán (n·∫øu c√≥)
    ip_address NVARCHAR(45),                      -- IP address (security tracking)
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_CurrencyTransaction_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_CurrencyTransaction_Currency FOREIGN KEY (currency_id) REFERENCES [Currency](currency_id),
    CONSTRAINT FK_CurrencyTransaction_Admin FOREIGN KEY (admin_user_id) REFERENCES [User](user_id)
);

-- ==========================================
-- B·∫¢NG KHO ƒê·ªí - H·ªÜ TH·ªêNG INVENTORY
-- ==========================================

-- B·∫¢NG DANH M·ª§C KHO ƒê·ªí - Ph√¢n lo·∫°i kho ƒë·ªì theo t·ª´ng tab
CREATE TABLE [InventoryCategory] (
    cat_id NVARCHAR(20) PRIMARY KEY,              -- ID danh m·ª•c (PK) - VD: "consumables", "pokeballs"
    cat_name NVARCHAR(50) NOT NULL,               -- T√™n internal
    display_name NVARCHAR(50) NOT NULL,           -- T√™n hi·ªÉn th·ªã - VD: "V·∫≠t Ph·∫©m Ti√™u Hao"
    description NVARCHAR(MAX),                    -- M√¥ t·∫£ danh m·ª•c
    icon_path NVARCHAR(255),                      -- Icon c·ªßa tab
    sort_order INT DEFAULT 0,                     -- Th·ª© t·ª± hi·ªÉn th·ªã
    max_slots INT DEFAULT 100 CHECK (max_slots > 0), -- S·ªë slot t·ªëi ƒëa ban ƒë·∫ßu
    is_expandable BIT DEFAULT 1,                  -- C√≥ th·ªÉ m·ªü r·ªông kh√¥ng
    expand_cost_type NVARCHAR(20),                -- Lo·∫°i ti·ªÅn ƒë·ªÉ m·ªü r·ªông (FK)
    expand_cost_amount INT DEFAULT 1000 CHECK (expand_cost_amount > 0), -- Gi√° m·ªü r·ªông
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_InventoryCategory_Currency FOREIGN KEY (expand_cost_type) REFERENCES [Currency](currency_id)
);

-- B·∫¢NG KHO ƒê·ªí USER - L∆∞u items m√† user s·ªü h·ªØu
CREATE TABLE [UserInventory] (
    uinv_id INT IDENTITY(1,1) PRIMARY KEY,        -- ID t·ª± tƒÉng
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    cat_id NVARCHAR(20) NOT NULL,                 -- ID danh m·ª•c (FK)
    item_id NVARCHAR(20) NOT NULL,                -- ID v·∫≠t ph·∫©m (FK)
    quantity INT DEFAULT 1 CHECK (quantity >= 0), -- S·ªë l∆∞·ª£ng (0 = ƒë√£ h·∫øt)
    slot_position INT CHECK (slot_position > 0),  -- V·ªã tr√≠ trong kho (t√πy ch·ªçn)
    is_favorited BIT DEFAULT 0,                   -- C√≥ ƒë∆∞·ª£c ƒë√°nh d·∫•u y√™u th√≠ch kh√¥ng
    is_locked BIT DEFAULT 0,                      -- C√≥ b·ªã kh√≥a kh√¥ng (kh√¥ng th·ªÉ b√°n/trade)
    obtained_date DATE DEFAULT CONVERT(DATE, GETDATE()), -- Ng√†y c√≥ ƒë∆∞·ª£c item
    last_used DATETIME2,                          -- L·∫ßn cu·ªëi s·ª≠ d·ª•ng
    notes NVARCHAR(MAX),                          -- Ghi ch√∫ c√° nh√¢n
    metadata NVARCHAR(MAX),                       -- D·ªØ li·ªáu ƒë·∫∑c bi·ªát (JSON) - VD: ƒë·ªô b·ªÅn, c·∫•p ƒë·ªô tƒÉng c∆∞·ªùng
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_UserInventory_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_UserInventory_Category FOREIGN KEY (cat_id) REFERENCES [InventoryCategory](cat_id),
    CONSTRAINT FK_UserInventory_Item FOREIGN KEY (item_id) REFERENCES [Item](item_id),
    CONSTRAINT UQ_user_cat_item UNIQUE (user_id, cat_id, item_id) -- M·ªói user trong m·ªói danh m·ª•c ch·ªâ c√≥ 1 record cho m·ªói item
);

-- ==========================================
-- B·∫¢NG QU√ÅI V·∫¨T C·ª¶A USER - D·ªÆ LI·ªÜU QUAN TR·ªåNG NH·∫§T
-- ==========================================

-- B·∫¢NG QU√ÅI V·∫¨T USER S·ªû H·ªÆU - L∆∞u t·ª´ng con qu√°i c·ª• th·ªÉ c·ªßa user
CREATE TABLE [UserMonster] (
    umon_id NVARCHAR(20) PRIMARY KEY,             -- ID qu√°i c·ªßa user (PK) - VD: "um_001_pikachu"
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    mon_id NVARCHAR(20) NOT NULL,                 -- ID m·∫´u qu√°i v·∫≠t (FK) - tham chi·∫øu Monster table
    nickname NVARCHAR(50),                        -- Bi·ªát danh do user ƒë·∫∑t
    level INT DEFAULT 1 CHECK (level BETWEEN 1 AND 100), -- C·∫•p ƒë·ªô hi·ªán t·∫°i
    current_hp INT NOT NULL CHECK (current_hp >= 0), -- HP hi·ªán t·∫°i (c√≥ th·ªÉ = 0 n·∫øu b·∫•t t·ªânh)
    max_hp INT NOT NULL CHECK (max_hp > 0),       -- HP t·ªëi ƒëa ·ªü level hi·ªán t·∫°i
    current_atk INT NOT NULL CHECK (current_atk > 0),    -- T·∫•n c√¥ng hi·ªán t·∫°i
    current_def INT NOT NULL CHECK (current_def > 0),    -- Ph√≤ng th·ªß hi·ªán t·∫°i
    current_spa INT NOT NULL CHECK (current_spa > 0),    -- T·∫•n c√¥ng ƒë·∫∑c bi·ªát hi·ªán t·∫°i
    current_spd INT NOT NULL CHECK (current_spd > 0),    -- Ph√≤ng th·ªß ƒë·∫∑c bi·ªát hi·ªán t·∫°i
    current_spe INT NOT NULL CHECK (current_spe > 0),    -- T·ªëc ƒë·ªô hi·ªán t·∫°i
    experience INT DEFAULT 0 CHECK (experience >= 0),    -- Kinh nghi·ªám hi·ªán t·∫°i
    -- IV (Individual Values) - Gi√° tr·ªã c√° th·ªÉ (0-31 cho m·ªói stat)
    iv_hp INT DEFAULT 15 CHECK (iv_hp BETWEEN 0 AND 31),
    iv_atk INT DEFAULT 15 CHECK (iv_atk BETWEEN 0 AND 31),
    iv_def INT DEFAULT 15 CHECK (iv_def BETWEEN 0 AND 31),
    iv_spa INT DEFAULT 15 CHECK (iv_spa BETWEEN 0 AND 31),
    iv_spd INT DEFAULT 15 CHECK (iv_spd BETWEEN 0 AND 31),
    iv_spe INT DEFAULT 15 CHECK (iv_spe BETWEEN 0 AND 31),
    -- EV (Effort Values) - Gi√° tr·ªã n·ªó l·ª±c (0-255 cho m·ªói stat, t·ªïng <= 510)
    ev_hp INT DEFAULT 0 CHECK (ev_hp BETWEEN 0 AND 255),
    ev_atk INT DEFAULT 0 CHECK (ev_atk BETWEEN 0 AND 255),
    ev_def INT DEFAULT 0 CHECK (ev_def BETWEEN 0 AND 255),
    ev_spa INT DEFAULT 0 CHECK (ev_spa BETWEEN 0 AND 255),
    ev_spd INT DEFAULT 0 CHECK (ev_spd BETWEEN 0 AND 255),
    ev_spe INT DEFAULT 0 CHECK (ev_spe BETWEEN 0 AND 255),
    nature NVARCHAR(20) DEFAULT 'hardy',          -- T√≠nh c√°ch (·∫£nh h∆∞·ªüng ƒë·∫øn stats)
    ability NVARCHAR(50),                         -- ƒê·∫∑c t√≠nh - VD: "Static", "Lightning Rod"
    gender NVARCHAR(20) DEFAULT 'male' CHECK (gender IN ('male', 'female', 'genderless')), -- Gi·ªõi t√≠nh
    is_shiny BIT DEFAULT 0,                       -- C√≥ ph·∫£i shiny kh√¥ng (m√†u kh√°c th∆∞·ªùng)
    status_condition NVARCHAR(20) DEFAULT 'healthy', -- T√¨nh tr·∫°ng - VD: "paralyzed", "burned"
    status_turns INT DEFAULT 0 CHECK (status_turns >= 0), -- S·ªë turn c√≤n l·∫°i c·ªßa status
    held_item_id NVARCHAR(20),                    -- V·∫≠t ph·∫©m ƒëang c·∫ßm (FK)
    -- V·ªã tr√≠ c·ªßa qu√°i
    location NVARCHAR(20) DEFAULT 'box' CHECK (location IN ('party', 'box', 'daycare', 'released')), -- V·ªã tr√≠
    party_position INT CHECK (party_position BETWEEN 1 AND 6), -- V·ªã tr√≠ trong party (1-6)
    box_number INT DEFAULT 1 CHECK (box_number BETWEEN 1 AND 20),   -- S·ªë box (1-20)
    box_position INT DEFAULT 1 CHECK (box_position BETWEEN 1 AND 30), -- V·ªã tr√≠ trong box (1-30)
    -- Th√¥ng tin b·∫Øt gi·ªØ
    original_trainer NVARCHAR(50),                -- Trainer g·ªëc (ng∆∞·ªùi b·∫Øt ƒë·∫ßu ti√™n)
    trainer_id NVARCHAR(20),                      -- ID trainer g·ªëc
    caught_location NVARCHAR(20),                 -- ƒê·ªãa ƒëi·ªÉm b·∫Øt ƒë∆∞·ª£c
    caught_level INT DEFAULT 1 CHECK (caught_level BETWEEN 1 AND 100), -- C·∫•p ƒë·ªô khi b·∫Øt
    caught_date DATE,                             -- Ng√†y b·∫Øt ƒë∆∞·ª£c
    friendship INT DEFAULT 50 CHECK (friendship BETWEEN 0 AND 255), -- ƒê·ªô th√¢n thi·ªán v·ªõi trainer
    is_legitimate BIT DEFAULT 1,                  -- C√≥ h·ª£p ph√°p kh√¥ng (anti-cheat flag)
    caught_at DATETIME2 DEFAULT GETDATE(),        -- Timestamp b·∫Øt ƒë∆∞·ª£c
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE(),
    -- Constraint: T·ªïng EV kh√¥ng ƒë∆∞·ª£c qu√° 510 (rule c·ªßa Pokemon)
    CONSTRAINT CHK_ev_total CHECK ((ev_hp+ev_atk+ev_def+ev_spa+ev_spd+ev_spe) <= 510),
    CONSTRAINT FK_UserMonster_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_UserMonster_Monster FOREIGN KEY (mon_id) REFERENCES [Monster](mon_id),
    CONSTRAINT FK_UserMonster_Item FOREIGN KEY (held_item_id) REFERENCES [Item](item_id),
    CONSTRAINT UQ_party_position UNIQUE (user_id, party_position) -- M·ªói v·ªã tr√≠ party ch·ªâ c√≥ 1 qu√°i
);

-- B·∫¢NG CHI√äU TH·ª®C C·ª¶A QU√ÅI USER - L∆∞u 4 chi√™u m√† m·ªói qu√°i ƒëang bi·∫øt
CREATE TABLE [UserMonsterMove] (
    umove_id INT IDENTITY(1,1) PRIMARY KEY,       -- ID t·ª± tƒÉng
    umon_id NVARCHAR(20) NOT NULL,                -- ID qu√°i c·ªßa user (FK)
    move_id NVARCHAR(20) NOT NULL,                -- ID chi√™u th·ª©c (FK)
    slot_pos INT NOT NULL CHECK (slot_pos BETWEEN 1 AND 4), -- V·ªã tr√≠ slot (1-4)
    current_pp INT NOT NULL CHECK (current_pp >= 0), -- PP hi·ªán t·∫°i
    max_pp INT NOT NULL CHECK (max_pp > 0),       -- PP t·ªëi ƒëa (c√≥ th·ªÉ tƒÉng b·∫±ng PP Up)
    pp_ups_used INT DEFAULT 0 CHECK (pp_ups_used BETWEEN 0 AND 3), -- S·ªë PP Up ƒë√£ d√πng
    learned_level INT CHECK (learned_level BETWEEN 1 AND 100), -- C·∫•p ƒë·ªô h·ªçc chi√™u n√†y
    learn_method NVARCHAR(20) DEFAULT 'level' CHECK (learn_method IN ('level', 'tm', 'tutor', 'egg', 'reminder')), -- C√°ch h·ªçc
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT CHK_pp_valid CHECK (current_pp <= max_pp), -- PP hi·ªán t·∫°i kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° max
    CONSTRAINT FK_UserMonsterMove_Monster FOREIGN KEY (umon_id) REFERENCES [UserMonster](umon_id) ON DELETE CASCADE,
    CONSTRAINT FK_UserMonsterMove_Move FOREIGN KEY (move_id) REFERENCES [Move](move_id),
    CONSTRAINT UQ_monster_slot UNIQUE (umon_id, slot_pos) -- M·ªói slot ch·ªâ c√≥ 1 chi√™u
);

-- ==========================================
-- B·∫¢NG TH·∫æ GI·ªöI GAME - LOCATIONS & NPCs
-- ==========================================

-- B·∫¢NG ƒê·ªäA ƒêI·ªÇM - ƒê·ªãnh nghƒ©a c√°c khu v·ª±c trong game
CREATE TABLE [Location] (
    loc_id NVARCHAR(20) PRIMARY KEY,              -- ID ƒë·ªãa ƒëi·ªÉm (PK) - VD: "town_01", "route_01"
    loc_name NVARCHAR(50) NOT NULL,               -- T√™n ƒë·ªãa ƒëi·ªÉm - VD: "Pallet Town"
    loc_type NVARCHAR(20) NOT NULL CHECK (loc_type IN ('town', 'route', 'cave', 'building', 'gym', 'special')), -- Lo·∫°i ƒë·ªãa ƒëi·ªÉm
    parent_loc_id NVARCHAR(20),                   -- ƒê·ªãa ƒëi·ªÉm cha (FK) - VD: building trong town
    region NVARCHAR(50) DEFAULT 'main',           -- V√πng/Region - VD: "Kanto", "Johto"
    description NVARCHAR(MAX),                    -- M√¥ t·∫£ ƒë·ªãa ƒëi·ªÉm
    bg_music NVARCHAR(255),                       -- File nh·∫°c n·ªÅn
    weather NVARCHAR(20) DEFAULT 'none' CHECK (weather IN ('sunny', 'rain', 'snow', 'sandstorm', 'fog', 'none')), -- Th·ªùi ti·∫øt
    can_fly BIT DEFAULT 0,                        -- C√≥ th·ªÉ bay ƒë·∫øn b·∫±ng Fly kh√¥ng
    unlock_requirement NVARCHAR(MAX),             -- ƒêi·ªÅu ki·ªán m·ªü kh√≥a (JSON format)
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_Location_Parent FOREIGN KEY (parent_loc_id) REFERENCES [Location](loc_id)
);

-- B·∫¢NG NPC - Nh√¢n v·∫≠t kh√¥ng ng∆∞·ªùi ch∆°i
CREATE TABLE [NPC] (
    npc_id NVARCHAR(20) PRIMARY KEY,              -- ID NPC (PK) - VD: "prof_oak", "nurse_joy"
    npc_name NVARCHAR(50) NOT NULL,               -- T√™n NPC - VD: "Professor Oak"
    npc_type NVARCHAR(20) NOT NULL CHECK (npc_type IN ('merchant', 'quest_giver', 'trainer', 'gym_leader', 'generic', 'professor')), -- Lo·∫°i NPC
    loc_id NVARCHAR(20) NOT NULL,                 -- ƒê·ªãa ƒëi·ªÉm hi·ªán t·∫°i (FK)
    sprite_path NVARCHAR(255),                    -- ƒê∆∞·ªùng d·∫´n file h√¨nh ·∫£nh
    pos_x INT DEFAULT 0,                          -- T·ªça ƒë·ªô X tr√™n map
    pos_y INT DEFAULT 0,                          -- T·ªça ƒë·ªô Y tr√™n map
    facing NVARCHAR(20) DEFAULT 'down' CHECK (facing IN ('up', 'down', 'left', 'right')), -- H∆∞·ªõng nh√¨n
    movement NVARCHAR(20) DEFAULT 'static' CHECK (movement IN ('static', 'random', 'patrol', 'scripted')), -- Ki·ªÉu di chuy·ªÉn
    is_shop BIT DEFAULT 0,                        -- C√≥ ph·∫£i shop kh√¥ng
    is_trainer BIT DEFAULT 0,                     -- C√≥ ph·∫£i trainer (c√≥ th·ªÉ battle) kh√¥ng
    trainer_class NVARCHAR(50),                   -- L·ªõp trainer - VD: "Gym Leader", "Elite Four"
    can_rebattle BIT DEFAULT 0,                   -- C√≥ th·ªÉ ƒë·∫•u l·∫°i kh√¥ng
    last_battle DATE,                             -- Ng√†y cu·ªëi battle v·ªõi NPC n√†y
    is_active BIT DEFAULT 1,                      -- NPC c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
    unlock_requirement NVARCHAR(MAX),             -- ƒêi·ªÅu ki·ªán ƒë·ªÉ NPC xu·∫•t hi·ªán (JSON)
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_NPC_Location FOREIGN KEY (loc_id) REFERENCES [Location](loc_id)
);

-- ==========================================
-- B·∫¢NG G·∫∂P QU√ÅI & TI·∫æN H√ìA - C·ª∞C K·ª≤ QUAN TR·ªåNG
-- ==========================================

-- B·∫¢NG G·∫∂P QU√ÅI HOANG D√É - ƒê·ªãnh nghƒ©a qu√°i n√†o xu·∫•t hi·ªán ·ªü ƒë√¢u
CREATE TABLE [Encounter] (
    enc_id INT IDENTITY(1,1) PRIMARY KEY,         -- ID encounter t·ª± tƒÉng
    loc_id NVARCHAR(20) NOT NULL,                 -- ƒê·ªãa ƒëi·ªÉm g·∫∑p qu√°i (FK)
    mon_id NVARCHAR(20) NOT NULL,                 -- Lo√†i qu√°i g·∫∑p (FK)
    enc_type NVARCHAR(20) DEFAULT 'grass' CHECK (enc_type IN ('grass', 'cave', 'water', 'fishing', 'special')), -- Lo·∫°i encounter
    enc_rate DECIMAL(4,3) NOT NULL DEFAULT 0.100 CHECK (enc_rate BETWEEN 0.001 AND 1.000), -- T·ª∑ l·ªá g·∫∑p (1-100%)
    min_level INT DEFAULT 1 CHECK (min_level BETWEEN 1 AND 100), -- Level t·ªëi thi·ªÉu
    max_level INT DEFAULT 5 CHECK (max_level BETWEEN 1 AND 100), -- Level t·ªëi ƒëa
    time_of_day NVARCHAR(20) DEFAULT 'any' CHECK (time_of_day IN ('morning', 'day', 'evening', 'night', 'any')), -- Th·ªùi gian trong ng√†y
    weather NVARCHAR(20) DEFAULT 'any' CHECK (weather IN ('sunny', 'rain', 'snow', 'sandstorm', 'fog', 'any')), -- Th·ªùi ti·∫øt
    rarity NVARCHAR(20) DEFAULT 'common' CHECK (rarity IN ('common', 'uncommon', 'rare', 'very_rare', 'legendary')), -- ƒê·ªô hi·∫øm
    season_availability NVARCHAR(MAX), -- M√πa c√≥ th·ªÉ g·∫∑p (JSON) - VD: {"spring": true, "summer": false}
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_Encounter_Location FOREIGN KEY (loc_id) REFERENCES [Location](loc_id),
    CONSTRAINT FK_Encounter_Monster FOREIGN KEY (mon_id) REFERENCES [Monster](mon_id),
    CONSTRAINT CHK_level_range CHECK (max_level >= min_level) -- Level max ph·∫£i >= level min
);

-- B·∫¢NG TI·∫æN H√ìA - ƒê·ªãnh nghƒ©a c√°ch qu√°i ti·∫øn h√≥a
CREATE TABLE [Evolution] (
    evo_id INT IDENTITY(1,1) PRIMARY KEY,         -- ID ti·∫øn h√≥a t·ª± tƒÉng
    from_mon_id NVARCHAR(20) NOT NULL,            -- Qu√°i tr∆∞·ªõc ti·∫øn h√≥a (FK)
    to_mon_id NVARCHAR(20) NOT NULL,              -- Qu√°i sau ti·∫øn h√≥a (FK)
    evo_type NVARCHAR(20) NOT NULL CHECK (evo_type IN ('level', 'item', 'trade', 'friendship', 'time', 'location', 'stats')), -- Lo·∫°i ti·∫øn h√≥a
    requirement_value INT CHECK (requirement_value > 0), -- Gi√° tr·ªã y√™u c·∫ßu (level, friendship threshold)
    requirement_item_id NVARCHAR(20),             -- Item c·∫ßn thi·∫øt (evolution stone, etc.)
    requirement_location NVARCHAR(20),            -- ƒê·ªãa ƒëi·ªÉm c·∫ßn thi·∫øt
    requirement_time NVARCHAR(20) DEFAULT 'any' CHECK (requirement_time IN ('day', 'night', 'any')), -- Th·ªùi gian c·∫ßn thi·∫øt
    requirement_gender NVARCHAR(20) CHECK (requirement_gender IN ('male', 'female', 'any')), -- Gi·ªõi t√≠nh c·∫ßn thi·∫øt
    requirement_condition NVARCHAR(MAX),          -- ƒêi·ªÅu ki·ªán ph·ª©c t·∫°p kh√°c (JSON format)
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_Evolution_From FOREIGN KEY (from_mon_id) REFERENCES [Monster](mon_id),
    CONSTRAINT FK_Evolution_To FOREIGN KEY (to_mon_id) REFERENCES [Monster](mon_id),
    CONSTRAINT FK_Evolution_Item FOREIGN KEY (requirement_item_id) REFERENCES [Item](item_id),
    CONSTRAINT FK_Evolution_Location FOREIGN KEY (requirement_location) REFERENCES [Location](loc_id),
    CONSTRAINT CHK_evo_different CHECK (from_mon_id != to_mon_id) -- Kh√¥ng th·ªÉ t·ª± ti·∫øn h√≥a th√†nh ch√≠nh m√¨nh
);

-- B·∫¢NG B·ªò CHI√äU H·ªåC - ƒê·ªãnh nghƒ©a qu√°i n√†o h·ªçc chi√™u g√¨ ·ªü level n√†o
CREATE TABLE [Learnset] (
    learn_id INT IDENTITY(1,1) PRIMARY KEY,       -- ID t·ª± tƒÉng
    mon_id NVARCHAR(20) NOT NULL,                 -- Lo√†i qu√°i (FK)
    move_id NVARCHAR(20) NOT NULL,                -- Chi√™u th·ª©c (FK)
    learn_level INT NOT NULL CHECK (learn_level BETWEEN 1 AND 100), -- Level h·ªçc ƒë∆∞·ª£c
    learn_method NVARCHAR(20) DEFAULT 'level' CHECK (learn_method IN ('level', 'tm', 'tutor', 'egg', 'evolution', 'starter')), -- C√°ch h·ªçc
    is_required BIT DEFAULT 0,                    -- C√≥ ph·∫£i chi√™u b·∫Øt bu·ªôc kh√¥ng (starter move)
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_Learnset_Monster FOREIGN KEY (mon_id) REFERENCES [Monster](mon_id),
    CONSTRAINT FK_Learnset_Move FOREIGN KEY (move_id) REFERENCES [Move](move_id),
    CONSTRAINT UQ_mon_move_level UNIQUE (mon_id, move_id, learn_level, learn_method) -- Tr√°nh duplicate
);

-- ==========================================
-- B·∫¢NG BOSS & TRAINER SYSTEM
-- ==========================================

-- B·∫¢NG BOSS/GYM LEADERS - Nh·ªØng trainer m·∫°nh c·∫ßn ƒë√°nh b·∫°i
CREATE TABLE [Boss] (
    boss_id NVARCHAR(20) PRIMARY KEY,             -- ID boss (PK) - VD: "gym_01_brock"
    boss_name NVARCHAR(50) NOT NULL,              -- T√™n boss - VD: "Brock"
    title NVARCHAR(100),                          -- Ch·ª©c danh - VD: "Rock Gym Leader"
    loc_id NVARCHAR(20) NOT NULL,                 -- ƒê·ªãa ƒëi·ªÉm boss (FK)
    npc_id NVARCHAR(20),                          -- Li√™n k·∫øt v·ªõi NPC n·∫øu c√≥ (FK)
    boss_type NVARCHAR(20) DEFAULT 'gym_leader' CHECK (boss_type IN ('gym_leader', 'elite_four', 'champion', 'rival', 'special')), -- Lo·∫°i boss
    specialty_type NVARCHAR(20),                  -- H·ªá chuy√™n m√¥n - VD: "Rock", "Fire"
    difficulty_level INT DEFAULT 1 CHECK (difficulty_level BETWEEN 1 AND 10), -- ƒê·ªô kh√≥ (1-10)
    min_level_requirement INT DEFAULT 1,          -- Level t·ªëi thi·ªÉu ƒë·ªÉ th√°ch ƒë·∫•u
    badge_reward NVARCHAR(50),                    -- Huy hi·ªáu th∆∞·ªüng
    money_reward INT DEFAULT 0 CHECK (money_reward >= 0), -- Ti·ªÅn th∆∞·ªüng
    can_rebattle BIT DEFAULT 0,                   -- C√≥ th·ªÉ ƒë·∫•u l·∫°i kh√¥ng
    rebattle_cooldown_days INT DEFAULT 1,         -- Th·ªùi gian ch·ªù ƒë·∫•u l·∫°i (ng√†y)
    defeat_requirement NVARCHAR(MAX),             -- ƒêi·ªÅu ki·ªán ƒë·ªÉ ƒë∆∞·ª£c th√°ch ƒë·∫•u (JSON)
    victory_unlocks NVARCHAR(MAX),                -- M·ªü kh√≥a g√¨ khi th·∫Øng (JSON)
    intro_dialog NVARCHAR(MAX),                   -- Dialog tr∆∞·ªõc battle
    victory_dialog NVARCHAR(MAX),                 -- Dialog khi th·∫Øng boss
    defeat_dialog NVARCHAR(MAX),                  -- Dialog khi thua boss
    sprite_path NVARCHAR(255),                    -- H√¨nh ·∫£nh boss
    battle_bg_path NVARCHAR(255),                 -- Background battle
    battle_music_path NVARCHAR(255),              -- Nh·∫°c battle
    is_active BIT DEFAULT 1,                      -- Boss c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_Boss_Location FOREIGN KEY (loc_id) REFERENCES [Location](loc_id),
    CONSTRAINT FK_Boss_NPC FOREIGN KEY (npc_id) REFERENCES [NPC](npc_id)
);

-- B·∫¢NG PARTY C·ª¶A BOSS - Qu√°i m√† boss s·ª≠ d·ª•ng
CREATE TABLE [BossMonster] (
    boss_mon_id INT IDENTITY(1,1) PRIMARY KEY,    -- ID t·ª± tƒÉng
    boss_id NVARCHAR(20) NOT NULL,                -- ID boss (FK)
    mon_id NVARCHAR(20) NOT NULL,                 -- Lo√†i qu√°i (FK)
    level INT NOT NULL CHECK (level BETWEEN 1 AND 100), -- Level qu√°i
    party_position INT NOT NULL CHECK (party_position BETWEEN 1 AND 6), -- V·ªã tr√≠ trong party (1-6)
    nickname NVARCHAR(50),                        -- Bi·ªát danh (n·∫øu c√≥)
    held_item_id NVARCHAR(20),                    -- V·∫≠t ph·∫©m c·∫ßm (FK)
    ability NVARCHAR(50),                         -- ƒê·∫∑c t√≠nh
    nature NVARCHAR(20) DEFAULT 'hardy',          -- T√≠nh c√°ch
    iv_spread NVARCHAR(100) DEFAULT '31,31,31,31,31,31', -- IV values (HP,ATK,DEF,SPA,SPD,SPE)
    ev_spread NVARCHAR(100) DEFAULT '0,0,0,0,0,0', -- EV values (HP,ATK,DEF,SPA,SPD,SPE)
    gender NVARCHAR(20) DEFAULT 'male',           -- Gi·ªõi t√≠nh
    is_shiny BIT DEFAULT 0,                       -- C√≥ ph·∫£i shiny kh√¥ng
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_BossMonster_Boss FOREIGN KEY (boss_id) REFERENCES [Boss](boss_id) ON DELETE CASCADE,
    CONSTRAINT FK_BossMonster_Monster FOREIGN KEY (mon_id) REFERENCES [Monster](mon_id),
    CONSTRAINT FK_BossMonster_Item FOREIGN KEY (held_item_id) REFERENCES [Item](item_id),
    CONSTRAINT UQ_boss_party_position UNIQUE (boss_id, party_position) -- M·ªói v·ªã tr√≠ party ch·ªâ c√≥ 1 qu√°i
);

-- B·∫¢NG CHI√äU C·ª¶A BOSS MONSTERS - 4 chi√™u c·ªßa t·ª´ng qu√°i boss
CREATE TABLE [BossMonsterMove] (
    boss_move_id INT IDENTITY(1,1) PRIMARY KEY,   -- ID t·ª± tƒÉng
    boss_mon_id INT NOT NULL,                     -- ID boss monster (FK)
    move_id NVARCHAR(20) NOT NULL,                -- ID chi√™u th·ª©c (FK)
    slot_pos INT NOT NULL CHECK (slot_pos BETWEEN 1 AND 4), -- V·ªã tr√≠ slot (1-4)
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_BossMonsterMove_Monster FOREIGN KEY (boss_mon_id) REFERENCES [BossMonster](boss_mon_id) ON DELETE CASCADE,
    CONSTRAINT FK_BossMonsterMove_Move FOREIGN KEY (move_id) REFERENCES [Move](move_id),
    CONSTRAINT UQ_boss_move_slot UNIQUE (boss_mon_id, slot_pos) -- M·ªói slot ch·ªâ c√≥ 1 chi√™u
);

-- B·∫¢NG L·ªäCH S·ª¨ ƒê√ÅNH B·∫†I BOSS - Tracking ai ƒë√£ ƒë√°nh b·∫°i boss n√†o
CREATE TABLE [UserBossDefeat] (
    defeat_id INT IDENTITY(1,1) PRIMARY KEY,      -- ID t·ª± tƒÉng
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    boss_id NVARCHAR(20) NOT NULL,                -- ID boss (FK)
    defeat_count INT DEFAULT 1,                   -- S·ªë l·∫ßn ƒë√£ ƒë√°nh b·∫°i
    first_defeat_at DATETIME2 DEFAULT GETDATE(),  -- L·∫ßn ƒë·∫ßu ƒë√°nh b·∫°i
    last_defeat_at DATETIME2 DEFAULT GETDATE(),   -- L·∫ßn cu·ªëi ƒë√°nh b·∫°i
    best_time_seconds INT,                        -- Th·ªùi gian battle nhanh nh·∫•t (gi√¢y)
    badges_earned NVARCHAR(MAX),                  -- Huy hi·ªáu ƒë√£ nh·∫≠n (JSON)
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_UserBossDefeat_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_UserBossDefeat_Boss FOREIGN KEY (boss_id) REFERENCES [Boss](boss_id),
    CONSTRAINT UQ_user_boss UNIQUE (user_id, boss_id) -- M·ªói user ch·ªâ c√≥ 1 record cho m·ªói boss
);

-- ==========================================
-- B·∫¢NG SHOP SYSTEM - H·ªÜ TH·ªêNG MUA B√ÅN
-- ==========================================

-- B·∫¢NG DANH M·ª§C SHOP - Ph√¢n lo·∫°i h√†ng h√≥a trong shop
CREATE TABLE [ShopCategory] (
    shop_cat_id NVARCHAR(20) PRIMARY KEY,         -- ID danh m·ª•c shop (PK)
    cat_name NVARCHAR(50) NOT NULL,               -- T√™n internal
    display_name NVARCHAR(50) NOT NULL,           -- T√™n hi·ªÉn th·ªã - VD: "V·∫≠t Ph·∫©m H·ªìi Ph·ª•c"
    description NVARCHAR(MAX),                    -- M√¥ t·∫£ danh m·ª•c
    icon_path NVARCHAR(255),                      -- Icon danh m·ª•c
    sort_order INT DEFAULT 0,                     -- Th·ª© t·ª± hi·ªÉn th·ªã
    is_active BIT DEFAULT 1,                      -- Danh m·ª•c c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
    created_at DATETIME2 DEFAULT GETDATE()
);

-- B·∫¢NG H√ÄNG H√ìA C·ª¶A NPC SHOP - Items m√† NPC b√°n
CREATE TABLE [NPCShopItem] (
    shop_item_id INT IDENTITY(1,1) PRIMARY KEY,   -- ID t·ª± tƒÉng
    npc_id NVARCHAR(20) NOT NULL,                 -- ID NPC (FK)
    shop_cat_id NVARCHAR(20),                     -- Danh m·ª•c shop (FK)
    item_id NVARCHAR(20) NOT NULL,                -- ID v·∫≠t ph·∫©m (FK)
    price INT NOT NULL CHECK (price >= 0),        -- Gi√° b√°n
    currency_id NVARCHAR(20) DEFAULT 'gold',      -- Lo·∫°i ti·ªÅn t·ªá (FK)
    stock_quantity INT DEFAULT -1,                -- S·ªë l∆∞·ª£ng kho (-1 = kh√¥ng gi·ªõi h·∫°n)
    daily_stock_limit INT DEFAULT -1,             -- Gi·ªõi h·∫°n mua h√†ng ng√†y (-1 = kh√¥ng gi·ªõi h·∫°n)
    user_purchase_limit INT DEFAULT -1,           -- Gi·ªõi h·∫°n mua m·ªói user (-1 = kh√¥ng gi·ªõi h·∫°n)
    discount_percent DECIMAL(4,2) DEFAULT 0.0 CHECK (discount_percent BETWEEN 0 AND 100), -- % gi·∫£m gi√°
    sale_start_date DATE,                         -- Ng√†y b·∫Øt ƒë·∫ßu sale
    sale_end_date DATE,                           -- Ng√†y k·∫øt th√∫c sale
    is_featured BIT DEFAULT 0,                    -- C√≥ ph·∫£i h√†ng n·ªïi b·∫≠t kh√¥ng
    unlock_requirement NVARCHAR(MAX),             -- ƒêi·ªÅu ki·ªán m·ªü kh√≥a item (JSON)
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_NPCShopItem_NPC FOREIGN KEY (npc_id) REFERENCES [NPC](npc_id) ON DELETE CASCADE,
    CONSTRAINT FK_NPCShopItem_Category FOREIGN KEY (shop_cat_id) REFERENCES [ShopCategory](shop_cat_id),
    CONSTRAINT FK_NPCShopItem_Item FOREIGN KEY (item_id) REFERENCES [Item](item_id),
    CONSTRAINT FK_NPCShopItem_Currency FOREIGN KEY (currency_id) REFERENCES [Currency](currency_id),
    CONSTRAINT UQ_npc_shop_item UNIQUE (npc_id, item_id) -- M·ªói NPC ch·ªâ b√°n 1 record cho m·ªói item
);

-- B·∫¢NG L·ªäCH S·ª¨ MUA H√ÄNG - Tracking ng∆∞·ªùi ch∆°i mua g√¨
CREATE TABLE [UserShopPurchase] (
    purchase_id INT IDENTITY(1,1) PRIMARY KEY,    -- ID t·ª± tƒÉng
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    npc_id NVARCHAR(20) NOT NULL,                 -- ID NPC b√°n h√†ng (FK)
    item_id NVARCHAR(20) NOT NULL,                -- ID v·∫≠t ph·∫©m (FK)
    quantity INT NOT NULL CHECK (quantity > 0),   -- S·ªë l∆∞·ª£ng mua
    unit_price INT NOT NULL CHECK (unit_price >= 0), -- ƒê∆°n gi√°
    total_price INT NOT NULL CHECK (total_price >= 0), -- T·ªïng ti·ªÅn
    currency_id NVARCHAR(20) NOT NULL,            -- Lo·∫°i ti·ªÅn ƒë√£ d√πng (FK)
    discount_applied DECIMAL(4,2) DEFAULT 0.0,    -- % gi·∫£m gi√° ƒë√£ √°p d·ª•ng
    purchase_date DATE DEFAULT CONVERT(DATE, GETDATE()), -- Ng√†y mua
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_UserShopPurchase_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_UserShopPurchase_NPC FOREIGN KEY (npc_id) REFERENCES [NPC](npc_id),
    CONSTRAINT FK_UserShopPurchase_Item FOREIGN KEY (item_id) REFERENCES [Item](item_id),
    CONSTRAINT FK_UserShopPurchase_Currency FOREIGN KEY (currency_id) REFERENCES [Currency](currency_id)
);

-- ==========================================
-- B·∫¢NG C·ªêT TRUY·ªÜN & NHI·ªÜM V·ª§
-- ==========================================

-- B·∫¢NG C·ªêT TRUY·ªÜN - Qu·∫£n l√Ω story ch√≠nh
CREATE TABLE [Story] (
    story_id NVARCHAR(20) PRIMARY KEY,            -- ID c·ªët truy·ªán (PK)
    title NVARCHAR(200) NOT NULL,                 -- Ti√™u ƒë·ªÅ story
    description NVARCHAR(MAX),                    -- M√¥ t·∫£
    story_type NVARCHAR(20) DEFAULT 'main' CHECK (story_type IN ('main', 'side', 'tutorial', 'postgame')), -- Lo·∫°i story
    chapter_number INT,                           -- S·ªë ch∆∞∆°ng
    order_index INT NOT NULL,                     -- Th·ª© t·ª± (ƒë·ªÉ s·∫Øp x·∫øp)
    unlock_condition NVARCHAR(MAX),               -- ƒêi·ªÅu ki·ªán m·ªü kh√≥a (JSON)
    completion_reward NVARCHAR(MAX),              -- Ph·∫ßn th∆∞·ªüng ho√†n th√†nh (JSON)
    is_active BIT DEFAULT 1,                      -- Story c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
    created_at DATETIME2 DEFAULT GETDATE()
);

-- B·∫¢NG NHI·ªÜM V·ª§ - Qu·∫£n l√Ω t·∫•t c·∫£ quests
CREATE TABLE [Quest] (
    quest_id NVARCHAR(20) PRIMARY KEY,            -- ID nhi·ªám v·ª• (PK)
    story_id NVARCHAR(20),                        -- ID c·ªët truy·ªán (FK, c√≥ th·ªÉ NULL n·∫øu l√† side quest)
    title NVARCHAR(200) NOT NULL,                 -- Ti√™u ƒë·ªÅ quest
    description NVARCHAR(MAX) NOT NULL,           -- M√¥ t·∫£ chi ti·∫øt
    quest_type NVARCHAR(20) DEFAULT 'side' CHECK (quest_type IN ('main', 'side', 'daily', 'tutorial', 'achievement')), -- Lo·∫°i quest
    objective_type NVARCHAR(20) NOT NULL CHECK (objective_type IN ('catch', 'defeat', 'collect', 'reach', 'talk', 'win_battle', 'evolve', 'custom')), -- Lo·∫°i m·ª•c ti√™u
    objective_target NVARCHAR(100),               -- M·ª•c ti√™u c·ª• th·ªÉ - VD: monster_id, item_id, location_id
    objective_count INT DEFAULT 1,                -- S·ªë l∆∞·ª£ng c·∫ßn ƒë·∫°t
    objective_data NVARCHAR(MAX),                 -- D·ªØ li·ªáu m·ª•c ti√™u chi ti·∫øt (JSON)
    reward_exp INT DEFAULT 0,                     -- EXP th∆∞·ªüng
    reward_money INT DEFAULT 0,                   -- Ti·ªÅn th∆∞·ªüng
    reward_items NVARCHAR(MAX),                   -- Items th∆∞·ªüng (JSON)
    prerequisite_quests NVARCHAR(MAX),            -- Quests c·∫ßn ho√†n th√†nh tr∆∞·ªõc (JSON)
    unlock_locations NVARCHAR(MAX),               -- ƒê·ªãa ƒëi·ªÉm m·ªü kh√≥a sau khi ho√†n th√†nh (JSON)
    unlock_npcs NVARCHAR(MAX),                    -- NPCs m·ªü kh√≥a (JSON)
    is_repeatable BIT DEFAULT 0,                  -- C√≥ th·ªÉ l·∫∑p l·∫°i kh√¥ng
    repeat_cooldown_hours INT DEFAULT 24,         -- Th·ªùi gian ch·ªù ƒë·ªÉ l·∫∑p l·∫°i (gi·ªù)
    auto_complete BIT DEFAULT 0,                  -- T·ª± ƒë·ªông ho√†n th√†nh khi ƒë·∫°t m·ª•c ti√™u
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_Quest_Story FOREIGN KEY (story_id) REFERENCES [Story](story_id)
);

-- B·∫¢NG TI·∫æN TR√åNH QUEST C·ª¶A USER - Tracking quest progress
CREATE TABLE [UserQuestProgress] (
    uquest_id INT IDENTITY(1,1) PRIMARY KEY,      -- ID t·ª± tƒÉng
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    quest_id NVARCHAR(20) NOT NULL,               -- ID nhi·ªám v·ª• (FK)
    status NVARCHAR(20) DEFAULT 'locked' CHECK (status IN ('available', 'active', 'completed', 'failed', 'locked', 'turned_in')), -- Tr·∫°ng th√°i quest
    current_progress INT DEFAULT 0,               -- Ti·∫øn tr√¨nh hi·ªán t·∫°i
    progress_data NVARCHAR(MAX),                  -- D·ªØ li·ªáu ti·∫øn tr√¨nh chi ti·∫øt (JSON)
    started_at DATETIME2,                         -- Th·ªùi gian b·∫Øt ƒë·∫ßu quest
    completed_at DATETIME2,                       -- Th·ªùi gian ho√†n th√†nh
    turned_in_at DATETIME2,                       -- Th·ªùi gian n·ªôp quest (nh·∫≠n th∆∞·ªüng)
    notes NVARCHAR(MAX),                          -- Ghi ch√∫
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_UserQuestProgress_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_UserQuestProgress_Quest FOREIGN KEY (quest_id) REFERENCES [Quest](quest_id),
    CONSTRAINT UQ_user_quest UNIQUE (user_id, quest_id) -- M·ªói user ch·ªâ c√≥ 1 record cho m·ªói quest
);

-- ==========================================
-- B·∫¢NG ACHIEVEMENT SYSTEM - H·ªÜ TH·ªêNG TH√ÄNH T·ª∞U
-- ==========================================

-- B·∫¢NG TH√ÄNH T·ª∞U - ƒê·ªãnh nghƒ©a c√°c th√†nh t·ª±u trong game
CREATE TABLE [Achievement] (
    achieve_id NVARCHAR(20) PRIMARY KEY,          -- ID th√†nh t·ª±u (PK) - VD: "catch_100_monsters"
    title NVARCHAR(100) NOT NULL,                 -- Ti√™u ƒë·ªÅ th√†nh t·ª±u
    description NVARCHAR(MAX) NOT NULL,           -- M√¥ t·∫£ chi ti·∫øt
    category NVARCHAR(20) DEFAULT 'misc' CHECK (category IN ('collection', 'battle', 'exploration', 'story', 'social', 'misc')), -- Danh m·ª•c
    icon_path NVARCHAR(255),                      -- Icon th√†nh t·ª±u
    points INT DEFAULT 10 CHECK (points >= 0),    -- ƒêi·ªÉm th√†nh t·ª±u
    is_hidden BIT DEFAULT 0,                      -- C√≥ ·∫©n kh√¥ng (kh√¥ng hi·ªÉn th·ªã cho ƒë·∫øn khi unlock)
    unlock_condition NVARCHAR(MAX) NOT NULL,      -- ƒêi·ªÅu ki·ªán m·ªü kh√≥a (JSON format)
    reward_items NVARCHAR(MAX),                   -- V·∫≠t ph·∫©m th∆∞·ªüng (JSON)
    reward_money INT DEFAULT 0,                   -- Ti·ªÅn th∆∞·ªüng
    reward_title NVARCHAR(100),                   -- Danh hi·ªáu m·ªü kh√≥a
    prerequisite_achievements NVARCHAR(MAX),      -- Th√†nh t·ª±u c·∫ßn ho√†n th√†nh tr∆∞·ªõc (JSON)
    rarity NVARCHAR(20) DEFAULT 'common' CHECK (rarity IN ('common', 'uncommon', 'rare', 'epic', 'legendary')), -- ƒê·ªô hi·∫øm
    is_active BIT DEFAULT 1,                      -- Th√†nh t·ª±u c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
    created_at DATETIME2 DEFAULT GETDATE()
);

-- B·∫¢NG TH√ÄNH T·ª∞U C·ª¶A USER - Tracking ti·∫øn tr√¨nh th√†nh t·ª±u c·ªßa ng∆∞·ªùi ch∆°i
CREATE TABLE [UserAchievement] (
    uachieve_id INT IDENTITY(1,1) PRIMARY KEY,    -- ID t·ª± tƒÉng
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    achieve_id NVARCHAR(20) NOT NULL,             -- ID th√†nh t·ª±u (FK)
    progress_current INT DEFAULT 0,               -- Ti·∫øn tr√¨nh hi·ªán t·∫°i
    progress_target INT DEFAULT 1,                -- Ti·∫øn tr√¨nh m·ª•c ti√™u
    progress_data NVARCHAR(MAX),                  -- D·ªØ li·ªáu ti·∫øn tr√¨nh chi ti·∫øt (JSON)
    is_completed BIT DEFAULT 0,                   -- ƒê√£ ho√†n th√†nh ch∆∞a
    completed_at DATETIME2,                       -- Th·ªùi gian ho√†n th√†nh
    claimed_at DATETIME2,                         -- Th·ªùi gian nh·∫≠n th∆∞·ªüng
    is_claimed BIT DEFAULT 0,                     -- ƒê√£ nh·∫≠n th∆∞·ªüng ch∆∞a
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_UserAchievement_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_UserAchievement_Achievement FOREIGN KEY (achieve_id) REFERENCES [Achievement](achieve_id),
    CONSTRAINT UQ_user_achievement UNIQUE (user_id, achieve_id) -- M·ªói user ch·ªâ c√≥ 1 record cho m·ªói achievement
);

-- ==========================================
-- B·∫¢NG PROGRESS FLAGS - TI·∫æN TR√åNH GAME
-- ==========================================

-- B·∫¢NG FLAGS TI·∫æN TR√åNH GAME - L∆∞u tr·∫°ng th√°i game c·ªßa user
CREATE TABLE [UserProgressFlag] (
    flag_id INT IDENTITY(1,1) PRIMARY KEY,        -- ID t·ª± tƒÉng
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    flag_name NVARCHAR(100) NOT NULL,             -- T√™n flag - VD: "met_professor", "got_starter"
    flag_value NVARCHAR(MAX) DEFAULT 'true',      -- Gi√° tr·ªã flag
    flag_type NVARCHAR(20) DEFAULT 'boolean' CHECK (flag_type IN ('boolean', 'integer', 'string', 'json')), -- Lo·∫°i d·ªØ li·ªáu
    description NVARCHAR(500),                    -- M√¥ t·∫£ flag
    category NVARCHAR(50) DEFAULT 'general',      -- Danh m·ª•c flag - VD: "story", "tutorial", "setting"
    set_at DATETIME2 DEFAULT GETDATE(),           -- Th·ªùi gian set flag
    updated_at DATETIME2 DEFAULT GETDATE(),       -- Th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi
    CONSTRAINT FK_UserProgressFlag_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT UQ_user_flag UNIQUE (user_id, flag_name) -- M·ªói user ch·ªâ c√≥ 1 record cho m·ªói flag
);

-- ==========================================
-- B·∫¢NG TRADING SYSTEM - GIAO D·ªäCH GI·ªÆA USERS
-- ==========================================

-- B·∫¢NG ƒê·ªÄ NGH·ªä GIAO D·ªäCH - User A mu·ªën trade v·ªõi User B
CREATE TABLE [TradeOffer] (
    trade_id NVARCHAR(20) PRIMARY KEY,            -- ID giao d·ªãch (PK)
    from_user_id NVARCHAR(20) NOT NULL,           -- User ƒë·ªÅ ngh·ªã giao d·ªãch (FK)
    to_user_id NVARCHAR(20) NOT NULL,             -- User nh·∫≠n ƒë·ªÅ ngh·ªã (FK)
    status NVARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'declined', 'expired', 'cancelled')), -- Tr·∫°ng th√°i
    offer_type NVARCHAR(20) NOT NULL CHECK (offer_type IN ('item', 'currency', 'monster', 'mixed')), -- Lo·∫°i ƒë·ªÅ ngh·ªã
    offered_items NVARCHAR(MAX),                  -- Items ƒë·ªÅ ngh·ªã (JSON)
    offered_currencies NVARCHAR(MAX),             -- Ti·ªÅn t·ªá ƒë·ªÅ ngh·ªã (JSON)
    offered_monsters NVARCHAR(MAX),               -- Qu√°i ƒë·ªÅ ngh·ªã (JSON)
    requested_items NVARCHAR(MAX),                -- Items y√™u c·∫ßu (JSON)
    requested_currencies NVARCHAR(MAX),           -- Ti·ªÅn t·ªá y√™u c·∫ßu (JSON)
    requested_monsters NVARCHAR(MAX),             -- Qu√°i y√™u c·∫ßu (JSON)
    message NVARCHAR(500),                        -- Tin nh·∫Øn k√®m theo
    expires_at DATETIME2,                         -- Th·ªùi gian h·∫øt h·∫°n
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE(),
    accepted_at DATETIME2,                        -- Th·ªùi gian ch·∫•p nh·∫≠n
    CONSTRAINT FK_TradeOffer_FromUser FOREIGN KEY (from_user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_TradeOffer_ToUser FOREIGN KEY (to_user_id) REFERENCES [User](user_id),
    CONSTRAINT CHK_trade_different_users CHECK (from_user_id != to_user_id) -- Kh√¥ng th·ªÉ trade v·ªõi ch√≠nh m√¨nh
);

-- B·∫¢NG L·ªäCH S·ª¨ GIAO D·ªäCH - Trade ƒë√£ ho√†n th√†nh
CREATE TABLE [TradeHistory] (
    trade_hist_id NVARCHAR(20) PRIMARY KEY,       -- ID l·ªãch s·ª≠ (PK)
    trade_offer_id NVARCHAR(20) NOT NULL,         -- ID ƒë·ªÅ ngh·ªã g·ªëc (FK)
    from_user_id NVARCHAR(20) NOT NULL,           -- User cho (FK)
    to_user_id NVARCHAR(20) NOT NULL,             -- User nh·∫≠n (FK)
    items_traded NVARCHAR(MAX),                   -- Items ƒë√£ trao ƒë·ªïi (JSON)
    currencies_traded NVARCHAR(MAX),              -- Ti·ªÅn t·ªá ƒë√£ trao ƒë·ªïi (JSON)
    monsters_traded NVARCHAR(MAX),                -- Qu√°i ƒë√£ trao ƒë·ªïi (JSON)
    trade_value_estimate BIGINT DEFAULT 0,        -- ∆Ø·ªõc t√≠nh gi√° tr·ªã giao d·ªãch (b·∫±ng v√†ng)
    completed_at DATETIME2 DEFAULT GETDATE(),     -- Th·ªùi gian ho√†n th√†nh
    CONSTRAINT FK_TradeHistory_Offer FOREIGN KEY (trade_offer_id) REFERENCES [TradeOffer](trade_id),
    CONSTRAINT FK_TradeHistory_FromUser FOREIGN KEY (from_user_id) REFERENCES [User](user_id),
    CONSTRAINT FK_TradeHistory_ToUser FOREIGN KEY (to_user_id) REFERENCES [User](user_id)
);

-- ==========================================
-- B·∫¢NG DAILY SYSTEM - H·ªÜ TH·ªêNG H√ÄNG NG√ÄY
-- ==========================================

-- B·∫¢NG M·∫™U PH·∫¶N TH∆Ø·ªûNG H√ÄNG NG√ÄY - ƒê·ªãnh nghƒ©a ph·∫ßn th∆∞·ªüng theo ng√†y
CREATE TABLE [DailyRewardTemplate] (
    daily_template_id NVARCHAR(20) PRIMARY KEY,   -- ID template (PK)
    day_number INT NOT NULL CHECK (day_number BETWEEN 1 AND 31), -- Ng√†y th·ª© m·∫•y (1-31)
    reward_type NVARCHAR(20) NOT NULL CHECK (reward_type IN ('currency', 'item', 'monster', 'mixed')), -- Lo·∫°i th∆∞·ªüng
    currency_rewards NVARCHAR(MAX),               -- Ti·ªÅn t·ªá th∆∞·ªüng (JSON)
    item_rewards NVARCHAR(MAX),                   -- Items th∆∞·ªüng (JSON)
    monster_rewards NVARCHAR(MAX),                -- Qu√°i th∆∞·ªüng (JSON)
    is_premium_required BIT DEFAULT 0,            -- C·∫ßn premium kh√¥ng
    bonus_multiplier DECIMAL(3,2) DEFAULT 1.0,    -- H·ªá s·ªë nh√¢n th∆∞·ªüng
    created_at DATETIME2 DEFAULT GETDATE()
);

-- B·∫¢NG PH·∫¶N TH∆Ø·ªûNG H√ÄNG NG√ÄY C·ª¶A USER - Tracking user ƒë√£ nh·∫≠n th∆∞·ªüng ng√†y n√†o
CREATE TABLE [UserDailyReward] (
    udaily_id INT IDENTITY(1,1) PRIMARY KEY,      -- ID t·ª± tƒÉng
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    day_number INT NOT NULL,                      -- Ng√†y th·ª© m·∫•y
    claimed_date DATE NOT NULL,                   -- Ng√†y nh·∫≠n th∆∞·ªüng
    rewards_received NVARCHAR(MAX),               -- Ph·∫ßn th∆∞·ªüng ƒë√£ nh·∫≠n (JSON)
    bonus_applied BIT DEFAULT 0,                  -- C√≥ √°p d·ª•ng bonus kh√¥ng
    streak_count INT DEFAULT 1,                   -- Chu·ªói ng√†y li√™n ti·∫øp
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_UserDailyReward_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT UQ_user_daily_claim UNIQUE (user_id, claimed_date) -- M·ªói user ch·ªâ nh·∫≠n 1 l·∫ßn m·ªói ng√†y
);

-- ==========================================
-- B·∫¢NG PREMIUM SYSTEM - H·ªÜ TH·ªêNG PREMIUM
-- ==========================================

-- B·∫¢NG G√ìI PREMIUM - ƒê·ªãnh nghƒ©a c√°c g√≥i mua b·∫±ng ti·ªÅn th·∫≠t
CREATE TABLE [PremiumPackage] (
    package_id NVARCHAR(20) PRIMARY KEY,          -- ID g√≥i (PK)
    package_name NVARCHAR(100) NOT NULL,          -- T√™n g√≥i
    description NVARCHAR(MAX),                    -- M√¥ t·∫£ g√≥i
    price_usd DECIMAL(8,2) NOT NULL CHECK (price_usd > 0), -- Gi√° USD
    diamond_amount INT NOT NULL CHECK (diamond_amount > 0), -- S·ªë kim c∆∞∆°ng
    bonus_diamond_amount INT DEFAULT 0,           -- Kim c∆∞∆°ng bonus
    bonus_items NVARCHAR(MAX),                    -- Items bonus (JSON)
    is_limited_time BIT DEFAULT 0,                -- C√≥ ph·∫£i g√≥i gi·ªõi h·∫°n th·ªùi gian kh√¥ng
    available_from DATETIME2,                     -- C√≥ s·∫µn t·ª´
    available_until DATETIME2,                    -- C√≥ s·∫µn ƒë·∫øn
    is_active BIT DEFAULT 1,                      -- G√≥i c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
    sort_order INT DEFAULT 0,                     -- Th·ª© t·ª± hi·ªÉn th·ªã
    icon_path NVARCHAR(255),                      -- Icon g√≥i
    created_at DATETIME2 DEFAULT GETDATE()
);

-- B·∫¢NG L·ªäCH S·ª¨ MUA PREMIUM - Tracking user mua g√≥i n√†o
CREATE TABLE [UserPremiumPurchase] (
    premium_purchase_id NVARCHAR(20) PRIMARY KEY, -- ID mua h√†ng (PK)
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    package_id NVARCHAR(20) NOT NULL,             -- ID g√≥i (FK)
    payment_method NVARCHAR(50),                  -- Ph∆∞∆°ng th·ª©c thanh to√°n
    payment_provider_id NVARCHAR(100),            -- ID t·ª´ payment gateway
    amount_usd DECIMAL(8,2) NOT NULL,             -- S·ªë ti·ªÅn USD
    diamonds_received INT NOT NULL,               -- Kim c∆∞∆°ng nh·∫≠n ƒë∆∞·ª£c
    bonus_diamonds_received INT DEFAULT 0,        -- Kim c∆∞∆°ng bonus nh·∫≠n ƒë∆∞·ª£c
    bonus_items_received NVARCHAR(MAX),           -- Items bonus nh·∫≠n ƒë∆∞·ª£c (JSON)
    status NVARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'failed', 'refunded')), -- Tr·∫°ng th√°i
    purchased_at DATETIME2 DEFAULT GETDATE(),     -- Th·ªùi gian mua
    processed_at DATETIME2,                       -- Th·ªùi gian x·ª≠ l√Ω
    refunded_at DATETIME2,                        -- Th·ªùi gian ho√†n ti·ªÅn (n·∫øu c√≥)
    CONSTRAINT FK_UserPremiumPurchase_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_UserPremiumPurchase_Package FOREIGN KEY (package_id) REFERENCES [PremiumPackage](package_id)
);

-- ==========================================
-- B·∫¢NG BATTLE & STATISTICS
-- ==========================================

-- B·∫¢NG L·ªäCH S·ª¨ CHI·∫æN ƒê·∫§U - Tracking t·∫•t c·∫£ battles
CREATE TABLE [BattleLog] (
    battle_id NVARCHAR(20) PRIMARY KEY,           -- ID tr·∫≠n ƒë·∫•u (PK)
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    battle_type NVARCHAR(20) NOT NULL CHECK (battle_type IN ('wild', 'trainer', 'boss', 'online', 'tournament')), -- Lo·∫°i battle
    opponent_id NVARCHAR(20),                     -- ID ƒë·ªëi th·ªß (c√≥ th·ªÉ l√† NPC, boss, ho·∫∑c user kh√°c)
    opponent_name NVARCHAR(100),                  -- T√™n ƒë·ªëi th·ªß hi·ªÉn th·ªã
    result NVARCHAR(20) NOT NULL CHECK (result IN ('win', 'lose', 'draw', 'run', 'catch', 'forfeit')), -- K·∫øt qu·∫£
    turns_count INT DEFAULT 0,                    -- S·ªë l∆∞·ª£t ƒë√£ ƒë·∫•u
    duration_seconds INT DEFAULT 0,               -- Th·ªùi gian battle (gi√¢y)
    exp_gained INT DEFAULT 0,                     -- EXP nh·∫≠n ƒë∆∞·ª£c
    money_gained INT DEFAULT 0,                   -- Ti·ªÅn th∆∞·ªüng
    items_gained NVARCHAR(MAX),                   -- Items nh·∫≠n ƒë∆∞·ª£c (JSON)
    monsters_caught NVARCHAR(MAX),                -- Qu√°i b·∫Øt ƒë∆∞·ª£c (JSON)
    battle_data NVARCHAR(MAX),                    -- D·ªØ li·ªáu chi ti·∫øt battle (JSON) - ƒë·ªÉ replay
    loc_id NVARCHAR(20),                          -- ƒê·ªãa ƒëi·ªÉm battle (FK)
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_BattleLog_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT FK_BattleLog_Location FOREIGN KEY (loc_id) REFERENCES [Location](loc_id)
);

-- B·∫¢NG TH·ªêNG K√ä USER - L∆∞u c√°c s·ªë li·ªáu th·ªëng k√™
CREATE TABLE [UserStatistic] (
    stat_id INT IDENTITY(1,1) PRIMARY KEY,        -- ID t·ª± tƒÉng
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    stat_name NVARCHAR(100) NOT NULL,             -- T√™n th·ªëng k√™ - VD: "battles_won", "monsters_caught"
    stat_value BIGINT DEFAULT 0,                  -- Gi√° tr·ªã th·ªëng k√™
    stat_type NVARCHAR(20) DEFAULT 'counter' CHECK (stat_type IN ('counter', 'highest', 'time', 'percentage')), -- Lo·∫°i th·ªëng k√™
    last_updated DATETIME2 DEFAULT GETDATE(),     -- L·∫ßn cu·ªëi c·∫≠p nh·∫≠t
    CONSTRAINT FK_UserStatistic_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT UQ_user_stat UNIQUE (user_id, stat_name) -- M·ªói user ch·ªâ c√≥ 1 record cho m·ªói lo·∫°i th·ªëng k√™
);

-- ==========================================
-- B·∫¢NG ANTI-CHEAT & SECURITY
-- ==========================================

-- B·∫¢NG HO·∫†T ƒê·ªòNG ƒê√ÅNG NG·ªú - Ph√°t hi·ªán gian l·∫≠n
CREATE TABLE [SuspiciousActivity] (
    activity_id NVARCHAR(20) PRIMARY KEY,         -- ID ho·∫°t ƒë·ªông (PK)
    user_id NVARCHAR(20),                         -- ID ng∆∞·ªùi ch∆°i (FK, c√≥ th·ªÉ NULL)
    activity_type NVARCHAR(50) NOT NULL CHECK (activity_type IN ('stat_manipulation', 'currency_anomaly', 'impossible_progress', 'duplicate_data', 'speed_hack', 'other')), -- Lo·∫°i ho·∫°t ƒë·ªông ƒë√°ng ng·ªù
    severity NVARCHAR(20) NOT NULL CHECK (severity IN ('low', 'medium', 'high', 'critical')), -- M·ª©c ƒë·ªô nghi√™m tr·ªçng
    description NVARCHAR(MAX) NOT NULL,           -- M√¥ t·∫£ chi ti·∫øt
    evidence_data NVARCHAR(MAX),                  -- B·∫±ng ch·ª©ng (JSON format)
    ip_address NVARCHAR(45),                      -- IP address
    user_agent NVARCHAR(MAX),                     -- Browser/Client info
    is_resolved BIT DEFAULT 0,                    -- ƒê√£ x·ª≠ l√Ω ch∆∞a
    resolution_notes NVARCHAR(MAX),               -- Ghi ch√∫ x·ª≠ l√Ω
    resolved_by NVARCHAR(20),                     -- Admin x·ª≠ l√Ω (FK)
    resolved_at DATETIME2,                        -- Th·ªùi gian x·ª≠ l√Ω
    created_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_SuspiciousActivity_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE SET NULL,
    CONSTRAINT FK_SuspiciousActivity_Resolver FOREIGN KEY (resolved_by) REFERENCES [User](user_id)
);

-- ==========================================
-- B·∫¢NG C√ÄI ƒê·∫∂T H·ªÜ TH·ªêNG
-- ==========================================

-- B·∫¢NG C√ÄI ƒê·∫∂T GAME - C·∫•u h√¨nh to√†n h·ªá th·ªëng
CREATE TABLE [GameSetting] (
    setting_id NVARCHAR(20) PRIMARY KEY,          -- ID setting (PK)
    setting_name NVARCHAR(100) NOT NULL,          -- T√™n setting
    setting_value NVARCHAR(MAX),                  -- Gi√° tr·ªã setting
    setting_type NVARCHAR(20) DEFAULT 'string' CHECK (setting_type IN ('string', 'integer', 'float', 'boolean', 'json')), -- Lo·∫°i d·ªØ li·ªáu
    description NVARCHAR(MAX),                    -- M√¥ t·∫£ setting
    is_user_config BIT DEFAULT 0,                 -- User c√≥ th·ªÉ thay ƒë·ªïi kh√¥ng
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE()
);

-- B·∫¢NG C√ÄI ƒê·∫∂T C√Å NH√ÇN - Setting ri√™ng c·ªßa t·ª´ng user
CREATE TABLE [UserSetting] (
    usetting_id INT IDENTITY(1,1) PRIMARY KEY,    -- ID t·ª± tƒÉng
    user_id NVARCHAR(20) NOT NULL,                -- ID ng∆∞·ªùi ch∆°i (FK)
    setting_name NVARCHAR(100) NOT NULL,          -- T√™n setting
    setting_value NVARCHAR(MAX),                  -- Gi√° tr·ªã setting c·ªßa user n√†y
    created_at DATETIME2 DEFAULT GETDATE(),
    updated_at DATETIME2 DEFAULT GETDATE(),
    CONSTRAINT FK_UserSetting_User FOREIGN KEY (user_id) REFERENCES [User](user_id) ON DELETE CASCADE,
    CONSTRAINT UQ_user_setting UNIQUE (user_id, setting_name) -- M·ªói user ch·ªâ c√≥ 1 record cho m·ªói setting
);

-- ==========================================
-- INDEXES ƒê·ªÇ T·ªêI ∆ØU HI·ªÜU SU·∫§T - R·∫§T QUAN TR·ªåNG!
-- ==========================================

-- Indexes cho b·∫£ng User
CREATE INDEX IX_User_Username ON [User](username);
CREATE INDEX IX_User_Email ON [User](email);
CREATE INDEX IX_User_Location ON [User](current_location);
CREATE INDEX IX_User_LastLogin ON [User](last_login);
CREATE INDEX IX_User_Active ON [User](is_active);

-- Indexes cho b·∫£ng Monster
CREATE INDEX IX_Monster_Type ON [Monster](type1, type2);
CREATE INDEX IX_Monster_Rarity ON [Monster](rarity);
CREATE INDEX IX_Monster_Legendary ON [Monster](is_legendary);
CREATE INDEX IX_Monster_Starter ON [Monster](is_starter);

-- Indexes cho b·∫£ng Move
CREATE INDEX IX_Move_Type ON [Move](move_type);
CREATE INDEX IX_Move_Category ON [Move](category);
CREATE INDEX IX_Move_TM ON [Move](is_tm, tm_number);
CREATE INDEX IX_Move_Power ON [Move](power);

-- Indexes cho b·∫£ng UserMonster (quan tr·ªçng nh·∫•t)
CREATE INDEX IX_UserMonster_Party ON [UserMonster](user_id, location, party_position);
CREATE INDEX IX_UserMonster_Template ON [UserMonster](user_id, mon_id);
CREATE INDEX IX_UserMonster_Location ON [UserMonster](location, user_id);
CREATE INDEX IX_UserMonster_Box ON [UserMonster](user_id, box_number, box_position);
CREATE INDEX IX_UserMonster_Level ON [UserMonster](level, mon_id);
CREATE INDEX IX_UserMonster_Shiny ON [UserMonster](is_shiny, user_id);

-- Indexes cho h·ªá th·ªëng battle
CREATE INDEX IX_BattleLog_UserDate ON [BattleLog](user_id, created_at);
CREATE INDEX IX_BattleLog_TypeDate ON [BattleLog](battle_type, created_at);
CREATE INDEX IX_BattleLog_Result ON [BattleLog](result, user_id);

-- Indexes cho h·ªá th·ªëng ti·ªÅn t·ªá
CREATE INDEX IX_CurrencyTransaction_UserDate ON [CurrencyTransaction](user_id, created_at);
CREATE INDEX IX_CurrencyTransaction_Type ON [CurrencyTransaction](trans_type, source_type);
CREATE INDEX IX_CurrencyTransaction_Verification ON [CurrencyTransaction](is_verified, created_at);
CREATE INDEX IX_UserCurrency_User ON [UserCurrency](user_id);

-- Indexes cho h·ªá th·ªëng inventory
CREATE INDEX IX_UserInventory_UserCat ON [UserInventory](user_id, cat_id);
CREATE INDEX IX_UserInventory_Item ON [UserInventory](item_id, user_id);
CREATE INDEX IX_UserInventory_Favorited ON [UserInventory](user_id, is_favorited);

-- Indexes cho h·ªá th·ªëng quest
CREATE INDEX IX_UserQuestProgress_Status ON [UserQuestProgress](user_id, status, quest_id);
CREATE INDEX IX_UserQuestProgress_Active ON [UserQuestProgress](status, updated_at);

-- Indexes cho encounters
CREATE INDEX IX_Encounter_LocationTypeRate ON [Encounter](loc_id, enc_type, enc_rate);
CREATE INDEX IX_Encounter_MonsterRate ON [Encounter](mon_id, enc_rate);
CREATE INDEX IX_Encounter_Rarity ON [Encounter](rarity, enc_rate);

-- Indexes cho evolutions
CREATE INDEX IX_Evolution_FromMonster ON [Evolution](from_mon_id);
CREATE INDEX IX_Evolution_ToMonster ON [Evolution](to_mon_id);
CREATE INDEX IX_Evolution_Type ON [Evolution](evo_type);

-- Indexes cho learnsets
CREATE INDEX IX_Learnset_Monster ON [Learnset](mon_id);
CREATE INDEX IX_Learnset_Move ON [Learnset](move_id);
CREATE INDEX IX_Learnset_Level ON [Learnset](learn_level);

-- Indexes cho boss system
CREATE INDEX IX_Boss_Location ON [Boss](loc_id);
CREATE INDEX IX_Boss_Type ON [Boss](boss_type);
CREATE INDEX IX_BossMonster_Boss ON [BossMonster](boss_id);
CREATE INDEX IX_UserBossDefeat_User ON [UserBossDefeat](user_id);

-- Indexes cho shop system
CREATE INDEX IX_NPCShopItem_NPC ON [NPCShopItem](npc_id);
CREATE INDEX IX_NPCShopItem_Featured ON [NPCShopItem](is_featured, npc_id);
CREATE INDEX IX_UserShopPurchase_User ON [UserShopPurchase](user_id);
CREATE INDEX IX_UserShopPurchase_Date ON [UserShopPurchase](purchase_date);

-- Indexes cho achievements
CREATE INDEX IX_Achievement_Category ON [Achievement](category);
CREATE INDEX IX_UserAchievement_User ON [UserAchievement](user_id);
CREATE INDEX IX_UserAchievement_Completed ON [UserAchievement](is_completed, user_id);

-- Indexes cho progress flags
CREATE INDEX IX_UserProgressFlag_User ON [UserProgressFlag](user_id);
CREATE INDEX IX_UserProgressFlag_Category ON [UserProgressFlag](category);

-- Indexes cho trading
CREATE INDEX IX_TradeOffer_FromUser ON [TradeOffer](from_user_id);
CREATE INDEX IX_TradeOffer_ToUser ON [TradeOffer](to_user_id);
CREATE INDEX IX_TradeOffer_Status ON [TradeOffer](status);

-- Indexes cho daily rewards
CREATE INDEX IX_UserDailyReward_User ON [UserDailyReward](user_id);
CREATE INDEX IX_UserDailyReward_Date ON [UserDailyReward](claimed_date);

-- Indexes cho premium
CREATE INDEX IX_UserPremiumPurchase_User ON [UserPremiumPurchase](user_id);
CREATE INDEX IX_UserPremiumPurchase_Status ON [UserPremiumPurchase](status);

-- Indexes cho security
CREATE INDEX IX_SuspiciousActivity_Unresolved ON [SuspiciousActivity](is_resolved, severity, created_at);

-- Indexes cho statistics
CREATE INDEX IX_UserStatistic_NameValue ON [UserStatistic](user_id, stat_name, stat_value);
GO

-- ==========================================
-- VIEWS H·ªÆU √çCH CHO QUERIES TH∆Ø·ªúNG D√ôNG
-- ==========================================

-- VIEW XEM PARTY C·ª¶A USER
CREATE VIEW [UserPartyView] AS
SELECT 
    um.user_id,
    um.umon_id,
    m.mon_name,
    um.nickname,
    um.level,
    um.current_hp,
    um.max_hp,
    um.party_position,
    m.type1,
    m.type2,
    um.is_shiny,
    um.status_condition,
    hi.item_name AS held_item_name
FROM [UserMonster] um
JOIN [Monster] m ON um.mon_id = m.mon_id
LEFT JOIN [Item] hi ON um.held_item_id = hi.item_id
WHERE um.location = 'party';
GO

-- VIEW TH·ªêNG K√ä T·ªîNG QUAN USER
CREATE VIEW [UserStatsView] AS
SELECT 
    u.user_id,
    u.username,
    u.display_name,
    u.current_location,
    ISNULL(gold.amount, 0) AS gold_amount,
    ISNULL(diamond.amount, 0) AS diamond_amount,
    ISNULL(party_count.party_size, 0) AS party_size,
    ISNULL(party_count.avg_level, 0) AS avg_party_level,
    ISNULL(total_count.total_monsters, 0) AS total_monsters,
    ISNULL(battle_stats.total_battles, 0) AS total_battles,
    ISNULL(battle_stats.battles_won, 0) AS battles_won,
    ISNULL(achievements.completed_count, 0) AS achievements_completed
FROM [User] u
LEFT JOIN [UserCurrency] gold ON u.user_id = gold.user_id AND gold.currency_id = 'gold'
LEFT JOIN [UserCurrency] diamond ON u.user_id = diamond.user_id AND diamond.currency_id = 'diamond'
LEFT JOIN (
    SELECT 
        user_id, 
        COUNT(*) AS party_size,
        AVG(CAST(level AS FLOAT)) AS avg_level
    FROM [UserMonster] 
    WHERE location = 'party' 
    GROUP BY user_id
) party_count ON u.user_id = party_count.user_id
LEFT JOIN (
    SELECT 
        user_id, 
        COUNT(*) AS total_monsters
    FROM [UserMonster] 
    WHERE location IN ('party', 'box') 
    GROUP BY user_id
) total_count ON u.user_id = total_count.user_id
LEFT JOIN (
    SELECT 
        user_id,
        SUM(CASE WHEN stat_name = 'battles_total' THEN stat_value ELSE 0 END) AS total_battles,
        SUM(CASE WHEN stat_name = 'battles_won' THEN stat_value ELSE 0 END) AS battles_won
    FROM [UserStatistic] 
    GROUP BY user_id
) battle_stats ON u.user_id = battle_stats.user_id
LEFT JOIN (
    SELECT 
        user_id,
        COUNT(*) AS completed_count
    FROM [UserAchievement] 
    WHERE is_completed = 1 
    GROUP BY user_id
) achievements ON u.user_id = achievements.user_id;
GO

-- ==========================================
-- STORED PROCEDURES H·ªÆU √çCH
-- ==========================================

-- PROCEDURE L·∫§Y PARTY C·ª¶A USER
CREATE PROCEDURE sp_GetUserParty
    @user_id NVARCHAR(20)
AS
BEGIN
    SELECT * FROM [UserPartyView] 
    WHERE user_id = @user_id 
    ORDER BY party_position;
END
GO

-- PROCEDURE TH√äM EXP CHO QU√ÅI
CREATE PROCEDURE sp_AddExperienceToMonster
    @umon_id NVARCHAR(20),
    @exp_gained INT
AS
BEGIN
    UPDATE [UserMonster] 
    SET experience = experience + @exp_gained,
        updated_at = GETDATE()
    WHERE umon_id = @umon_id;
END
GO

-- PROCEDURE C·∫¨P NH·∫¨T TH·ªêNG K√ä USER
CREATE PROCEDURE sp_UpdateUserStatistic
    @user_id NVARCHAR(20),
    @stat_name NVARCHAR(100),
    @stat_value BIGINT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM [UserStatistic] WHERE user_id = @user_id AND stat_name = @stat_name)
    BEGIN
        UPDATE [UserStatistic] 
        SET stat_value = @stat_value, 
            last_updated = GETDATE()
        WHERE user_id = @user_id AND stat_name = @stat_name;
    END
    ELSE
    BEGIN
        INSERT INTO [UserStatistic] (user_id, stat_name, stat_value, last_updated)
        VALUES (@user_id, @stat_name, @stat_value, GETDATE());
    END
END
GO

-- ==========================================
-- D·ªÆ LI·ªÜU M·∫™U C∆† B·∫¢N
-- ==========================================

-- Th√™m c√°c lo·∫°i ti·ªÅn t·ªá c∆° b·∫£n
INSERT INTO [Currency] (currency_id, currency_name, display_name, symbol, description, is_premium) VALUES
('gold', 'Gold', 'V√†ng', 'ü™ô', 'Ti·ªÅn t·ªá ch√≠nh trong game', 0),
('diamond', 'Diamond', 'Kim C∆∞∆°ng', 'üíé', 'Ti·ªÅn t·ªá premium mua b·∫±ng ti·ªÅn th·∫≠t', 1),
('battle_point', 'Battle Point', 'ƒêi·ªÉm Chi·∫øn ƒê·∫•u', '‚öîÔ∏è', 'ƒêi·ªÉm nh·∫≠n ƒë∆∞·ª£c t·ª´ battles', 0);

-- Th√™m c√°c danh m·ª•c inventory c∆° b·∫£n
INSERT INTO [InventoryCategory] (cat_id, cat_name, display_name, description, sort_order) VALUES
('consumables', 'consumables', 'V·∫≠t Ph·∫©m Ti√™u Hao', 'Potions, berries v√† c√°c items c√≥ th·ªÉ s·ª≠ d·ª•ng', 1),
('pokeballs', 'pokeballs', 'Monster Balls', 'C√°c lo·∫°i b√≥ng ƒë·ªÉ b·∫Øt qu√°i', 2),
('key_items', 'key_items', 'V·∫≠t Ph·∫©m Quan Tr·ªçng', 'Items quan tr·ªçng cho story v√† quests', 3),
('tms', 'tms', 'Technical Machines', 'M√°y d·∫°y chi√™u th·ª©c', 4);

-- Th√™m m·ªôt s·ªë items c∆° b·∫£n
INSERT INTO [Item] (item_id, item_name, category, item_type, buy_price, sell_price, description) VALUES
('potion', 'Potion', 'heal', 'consumable', 300, 150, 'H·ªìi ph·ª•c 20 HP cho qu√°i v·∫≠t'),
('pokeball', 'Monster Ball', 'ball', 'consumable', 200, 100, 'B√≥ng c∆° b·∫£n ƒë·ªÉ b·∫Øt qu√°i v·∫≠t'),
('antidote', 'Antidote', 'heal', 'consumable', 100, 50, 'Ch·ªØa t√¨nh tr·∫°ng ƒë·ªôc');

-- Th√™m m·ªôt s·ªë locations c∆° b·∫£n
INSERT INTO [Location] (loc_id, loc_name, loc_type, region, description) VALUES
('town_01', 'Pallet Town', 'town', 'Kanto', 'Th·ªã tr·∫•n kh·ªüi ƒë·∫ßu c·ªßa t·∫•t c·∫£ trainers'),
('route_01', 'Route 1', 'route', 'Kanto', 'Con ƒë∆∞·ªùng ƒë·∫ßu ti√™n d·∫´n t·ª´ Pallet Town'),
('lab_01', 'Oak Laboratory', 'building', 'Kanto', 'Ph√≤ng th√≠ nghi·ªám c·ªßa Professor Oak');

-- ==========================================
-- TH√îNG B√ÅO HO√ÄN TH√ÄNH CU·ªêI C√ôNG
-- ==========================================
PRINT N'=== DATABASE MONSTER_PK HO√ÄN TH√ÄNH 100% ===';
PRINT N'‚úÖ ƒê√£ t·∫°o ƒë·∫ßy ƒë·ªß 42 b·∫£ng v·ªõi format [TableName]';
PRINT N'‚úÖ ƒê√£ th√™m 65+ indexes ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t';
PRINT N'‚úÖ ƒê√£ thi·∫øt l·∫≠p ƒë·∫ßy ƒë·ªß Foreign Keys v√† Constraints';
PRINT N'‚úÖ ƒê√£ th√™m 2 Views h·ªØu √≠ch cho queries th∆∞·ªùng d√πng';
PRINT N'‚úÖ ƒê√£ th√™m 3 Stored Procedures h·ªØu √≠ch';
PRINT N'‚úÖ ƒê√£ th√™m d·ªØ li·ªáu m·∫´u c∆° b·∫£n';
PRINT N'‚úÖ Bao g·ªìm ch√∫ th√≠ch ti·∫øng Vi·ªát chi ti·∫øt cho m·ªçi field';
PRINT N'‚úÖ ƒê√£ fix l·ªói CREATE VIEW syntax';
PRINT N'‚úÖ S·∫µn s√†ng cho d·ª± √°n game Monster-taming RPG!';
PRINT N'üìä Database ho√†n h·∫£o v√† ready to use!';
PRINT N'üë®‚Äçüíª Created by: NPKhanh14';
PRINT N'üìÖ Completed: 2025-09-15 09:04:44 UTC';
PRINT N'üéÆ Total Tables: 42';
PRINT N'üìá Total Indexes: 65+';
PRINT N'üîó Total Constraints: 100+';
PRINT N'üîß Views & Procedures: 5';
PRINT N'üíæ Ready for Production!';

-- ==========================================
-- END OF COMPLETE DATABASE
-- ==========================================